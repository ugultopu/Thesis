After obtaining the Scalable Vector Graphics (SVG) image which is produced by:

1. Converting the raster image into black-and-white
2. Denoising it
3. Tracing it

we feed this SVG image into the main script. In the main script, the following happens:

1. The configuration file is read in order to determine where should the output level file be written to. The output level file is an XML file which contains a description of a Science Birds level. Overall, it has the following structure:

    <?xml version="1.0" encoding="utf-8"?>
    <Level>
      <Camera x="" y="" minWidth="" maxWidth="">
      <Birds>
        <Bird type="" />
        ...
      </Birds>
      <Slingshot x="" y="" >
      <GameObjects>
        <Block type="" material="" x="" y="" rotation="" />
        ...
        <Pig type="" x="" y="" rotation=""/>
        ...
        <Platform type="" x="" y="" scaleX="" scaleY="" />
        ...
        <TNT type="" x="" y="" rotation="" />
        ...
      </GameObjects>
    </Level>

Note that Science Birds developers have opted not to be very strict about the validity of XML in the level files. That is, some elements in the level actually turn the XML into invalid XML. Nevertheless, the level is still openable and it is still playable. Some examples to these invalid elements would be the elements `Camera` and `Slingshot`. Although these elements do not have a separate closing element, they don't end with `/>` as they should be in valid XML. Instead, they end with `>`, just like a self-closing tag in HTML. However, precisely speaking, a Science Birds level file is not an HTML file, it is an XML file. Hence, the aforementioned non-conforming elements should have either:

1. Had a closing tag.

or

2. Ended the single tag elements with `/>`, instead of `>`.

in order to ensure that the XML files of Sciene Birds levels are, indeed, valid XML files.

The sample level file structure scheme above demonstrates what a generic level would be similar to. However, it doesn't go into detail of explaining what these elements are, what is their use or how do their attributes alter or enhance their behavior. In order to gain a solid understanding of the level scheme of Science Birds, we need to understand the individual elements, and the attributes of each of these individual elements that make up a Science Birds level. To do so, we need to examine the sample Science Birds XML level structure step-by-step, examining one line at each step:

1.

    <?xml version="1.0" encoding="utf-8"?>

This is simply a generic XML file declaration. Without this element, we wouldn't be able to claim that a Science Birds level file is indeed, an XML file, even though it might be composed of elements within angular brackets and the file extension in a Science Birds level filename is `.xml`.

2.

    <Level>

This is the top-level container element that contains all the other elements that are necessary to be able to construct a complete, working Science Birds level. This is actually a container element. It is the only top-level element apart from the XML declaration line.

3.

    <Camera>

This element exists to describe where should be the view be when the level starts, and what how large should it be.

4.

    <Birds>

This is the element that contains all `<Bird>` elements. In other words, this is a container element for the `<Bird>` elements.

5.

    <Bird>

This is the element that adds a bird to the list of birds that can be used in this level. There are different types of birds. These types are:

TODO Insert a picture of every bird to cover space. Take them from https://github.com/lucasnfe/Science-Birds/blob/master/Assets/Sprites/Characters/birds.png

5.1 BirdWhite

BirdWhite is a bird that is comparatively larger than the rest of the birds. The large size of this bird gives the advantage of being able to knock down more blocks due to:

1. Larger impact area.
2. Higher impact force due to higher momentum.

5.2 BirdBlue

BirdBlue is a regular bird that is smaller than BirdWhite.

5.3 BirdYellow

BirdYellow is around the same size with BirdBlue, only that it is of yellow color.

5.4 BirdRed

BirdRed is similar to BirdBlue and BirdYellow, only that it is of red color.

- BirdBlack

BirdBlack is very similar to BirdWhite in terms of size. However, BirdBlack has one property that is not observed in any of the other birds. It has the ability to explode. Upon making the first contact with any kind of surface, be it the ground, a block, a platform, a pig or a TNT block, BirdBlack becomes "rigged to explode". This "rigged to explode" state is expressed by the BirdBlack's body flashing red intermittently. That is, it's body is covered with a red hue, and then it becomes normal. This state repeats a couple times a second until the bird explodes, which takes a couple seconds. Upon explosion, any movable thing that is in the immediate surrounding of the BirdBlack is pushed away from BirdBlack. This can help with knocking down more blocks and eliminating more pigs (that is, enemies), if the BirdBlack is launched in a manner that the explosion will happen in a strategically beneficial place which will allow these.

6.

    <Slingshot>

The slingshot is used to launch the birds into a trajectory in order to knock down the structures and to eliminate the enemies that are present on the level. Its attributes `x` and `y` are used to express the location on the two-dimensional level platform that the slingshot should be placed to.

7.

    <GameObjects>

This is a container element that is used to contain every single element in a Science Birds level, apart from the birds and the slingshot. That is, this element is used to contain all elements that a bird is able to make contact with, with of without effect. Specifically, it can contain `<Block>`, `<Platform>`, `<Pig>` and `<TNT>` elements.

8.

    <Block>

This is the main element that is used to construct structures. Basically, a Science Birds structure is an aggregation of `<Block>` elements. Technically, `<Platform>` elements and `<TNT>` elements can be used as part of a structure as well, along with using a `<Pig>` element as the enemy. However, in this programmatic content generator, a Science Birds structure consists only of `<Block>` elements.

There are precisely thirteen different shapes of blocks. Each block type has four integrity conditions. That is, when the blocks hadn't taken any damage, they are in perfect condition. As they take more damage, their condition changes. Finally, after enough damage, a block disappears and the player gets points from this.

Of the thirteen types of blocks, twelve of them has variations in all three materials, namely "ice", "wood" and "stone". Only one of them can be drawn in only one material, which is Ice Square.

Each of the four different integrity conditions of the blocks are represented by a different sprite for each block type. Hence, the total number of sprites for all blocks is as follows:

    12 * 3 * 4 + 4 = 148

The blocks, except the single material type block Ice Square, are the following:

- Small Circle
- Circle
- Triangle
- Triangle with Hole
- Small Square
- Square
- Square with Hole
- Tiny Rectangle
- Small Rectangle
- Medium Rectangle
- Big Rectangle
- Fat Rectangle

So, the first two attributes of the `<Block>` element are now clear. The `type` attribute is used to indicate which block type this block should stand for, where those block types are listed above. On the other hand, the `material` attribute is used to specify which material this block should be of. The possible materials are:

- Ice
- Wood
- Stone

The remaining attributes are `x`, `y` and `rotation`. These have the following respective purposes:

  x: This attribute specifies the location of this block on the X coordinate.
  y: This attribute specifies the location of this block on the Y coordinate.
  rotation: This attribute specifies the angle which this block is placed according to.

9.

    <Pig>

This element specifies a pig. The attributes are as follows:

    type: This attribute specifies the type of the pig. Possible values are:

    - BasicBig
    - BasicMedium
    - BasicSmall

    x: This attribute specifies the location of this pig on the X coordinate.
    y: This attribute specifies the location of this pig on the Y coordinate.
    rotation: This attribute specifies the angle which this pig is placed according to.

10.

    <TNT>

This element represents a TNT block. A TNT block is a block that is rigged to blow. Upon activation, a countdown for that TNT block starts and at the end of the countdown, the TNT block explodes. A TNT block becomes activated whenever another block hits it. The explosion of a TNT block destroys blocks and eliminates enemies in the surrounding of the TNT block, within a certain diameter.

2. After the configuration file has been read, the following parameters are extacted from it:


1. LevelPath: This parameter specifies the directory where the Science Birds levels should be written to, in order to be able to play them upon launching Science Birds.

2. PrimaryBlock: This parameter specifies the block that is used to construct the structure. A structure in Science Birds Programmatic Content Generator is constructed using two types of blocks: primary block and platform block. primary block is the block that is structure is initially constructed from. That is, the structure initially solely consists of primary blocks.

3. PlatformBlock: This parameter specifies the block that is used to support the primary blocks that have nothing under them to prevent them from falling. After the structure is initially constructed solely by using primary blocks, in most cases, there are some primary blocks that happens to have nothing under them. Had these blocks be left as it, they would simply start free falling upon level start. This is, of course, not a desirable thing, since in such case, the player would get undeserved points due to elimination of some blocks because of free falling. Also, the free falling blocks might result in imbalances in the structure and hence, result in toppling of the structure as well. Because of these reasons, in order to have a level with a stable and playable structure, we must make sure that there shouldn't be any blocks without anything supporting them below. Hence, the program determines where exactly to place these platforms and places these platform blocks accordingly. The details of the platform insertion procedure is examined in detail in the latter parts of this dissertation.

4. NumberOfPrimaryBlocksOnXAxis: This parameter specifies how many primary blocks should be placed to X axis. Initially, one might think that this should be determined by dividing the width of the structure to the width of the primary block. This is, in general, an accurate and sensible approach. However, there is a caveat: If the structure too wide, and the primary block's width is not wide enough, there will be a lot of blocks on the X axis, and as a result of this, on the Y axis as well. Hence, the structure will be composed of too many blocks. Similarly, if the structure is rather thin, and the primary block's width is wide relative to the width of the primary block, there will be too few blocks on the X axis, and as a result of this, on the Y axis as well. Hence, the structure will be composed of too few blocks.

Neither of these situations desirable. If the structure happens to be constructed of too many blocks, there will be three problems:

1. The rendering of these blocks will take more resources and hence, it might lead to a degraded experience.
2. Since there will be too many blocks, it will take more effort to knock down the structure. Similarly for eliminating all the pigs in the level. For example, it might require more birds to knock down the structure or eliminate all the pigs. In most cases, this is something that degrades the experience. Hence, having more than necessary amount of blocks for a structure is something to be best avoided.

In the same fashion, having too few blocks in a structure is an undesirable thing as well. If the structure is composed of too few blocks, it most likely will be too thin and short. In such case, most likely there won't be enough space in the structure to insert platforms and place pigs (enemies). There cannot be a playable level without any pigs, since the goal of each level is to eliminate every single pig in that level. For these reasons, having a level with a too thin structure is not something that we would like either.

So, we understood that if we decide on the number of primary blocks on the X axis by dividing the width of the structure to the width of the primary block, there is room for numerous problems. Hence, dividing the width of the structure to the width of the primary block is not the optimal method to decide on the number of primary blocks on the X axis and implicitly, the number of blocks of the whole structure.

What then, might be a better way to decide on the number of primary blocks on the X axis? As it is currently implemented, deciding on it manually, that is, using a parameter seems to be the best way now. One point to clarify here is that if we decide on the number of primary blocks on the X axis manually, instead of dividing the width of the structure to the width of the primary block, then how are we going to decide on the number of primary blocks on the Y axis? Should we use another parameter for that as well? Well, the answer is no, because doing that would simply remove the dependence between the structure's width of the X axis and on the Y axis. Removing this would result in the created structure being out of shape. Hence, in order not to cause such an issue, we instead proportionate the dimensions of the primary block to the dimensions required by the specified number of primary blocks on the X axis. Precisely, we do this as follows:

1. Divide the width of the structure to the specified number of primary blocks on the X axis.
2. Divide this result to the actual width of the primary block. The result of this gives us the block factor.
3. Multiply the block factor with the height of the primary block.
4. Divide the structure height by the result of the calculation done at step 3. The result will give the number of blocks that should be on the Y axis.

3. After reading the arguments, we read the SVG file in order to determine the shape and boundaries of the structure that we are about to construct. This is done as follows:

1. Read the SVG file.
2. Find the SVG `<polygon>` element in it.
3. Get the list of points in that `<polygon>` element.
4. Using this list of points, construct a `Polygon` object. This is done with the help of a library called Shapely.
5. Rotate this polygon object 180 degrees (upside-down). The reason for this step is that Potrace generates the SVG image in an upside-down form. In order to properly use the image to construct a Science Birds structure, we need to access the SVG image's proper (upright) version.

4. After reading the SVG file and constructing a polygon from it, we initialize a Structure object. A structure object is an object that represents a Science Birds structure. It represents every aspect of it. Some of these are:

1. The original polygon shape that is read from the SVG file.

2. All of the arguments:
  1. The level path.
  2. The primary block type.
  3. The platform block type.
  4. Number of primary blocks on X axis.

3. Number of primary blocks required to cover pig width: In this PCG, the pigs are placed by removing some primary blocks and placing the pig to the bottom center of the cavity as a result of this removal. Hence, the width created by removing the primary blocks should be at least as long as the pig's width. Otherwise, the pig simply wouldn't fit in the cavity created by removing the pigs. Hence, in order to determine this width, we make a calculation to determine the number of primary blocks to remove, so that the width created by this removal will at be at least equal to the width of a pig.

4. Number of primary blocks required to cover pig height: This is the same concept as "number of primary blocks required to cover pig width".

5. Primary block factor: This is the concept that we have mentioned about in the definition of "NumberOfPrimaryBlocksOnXAxis" parameter. To remember what we have stated there, the primary block factor is a ratio that dictates the factor the primary block dimensions need to be multiplied with in order to cover the structure width and the structure height.

6. Factored primary block width: This is the distance that is calculated by multiplying the primary block width with the primary block factor.

7. Factored primary block height: This is the distance that is calculated by multiplying the primary block height with the primary block factor.

8. Number of primary blocks on X axis: This is calculated by dividing the structure width by the factored primary block width.

9. Number of primary blocks on Y axis: This is calculated by dividing the structure height by the factored primary block height.

10. Original blocks: This is the matrix (list of lists) that holds the blocks of the structure location by location. As you can realize, this is not something that has been passed to the Structure class' constructor. That means this must be computed within the Structure class. Precisely, this is done in the `get_blocks` method of the Structure class. The algorithm is basically as follows:

  1. The structure shape that is obtained from the input SVG is partitioned into tiles, where the length and width of the tiles are dictated by the parameters `num_primary_blocks_on_x_axis` and `num_primary_blocks_on_y_axis`.

  2. Each tile is composed of:

    1. Either only by a structure.
    2. Or only by void.
    3. Or both some structure and some void.

  If the area of the structure within that tile is greater than or equal to half of the area of a tile, we decide that there should be a primary block inserted for this location. Otherwise, we leave this tile empty.

  We repeat this procedure for each tile and in the end, we obtain a list of lists, that contains True or False values, indicating that there should be a block in that location or not.

11. Blocks: This parameter is very similar to original blocks parameter, with the only difference being that this is the version of original blocks that is transposed and inverted. The original blocks parameter starts from top-left and continues towards bottom-right, as this is the natural procession order in SVG (and most image formats). However, for the purposes of constructing a Science Birds structure out of a matrix of blocks, the most practical way is to start from bottom-left and go towards top-right. The reason is starting from the ground and building a column, then proceeding to the next column and building it, until all columns have been finished.

12. Platforms: The platforms are obtained with the following algorithm:

  1. Determine every block which has nothing underneath it.
  2. Determine the row number of each such block and add this row number to a set which contains the row indices for platforms to be inserted under.
  3. Repeat this for every block on the structure.

These steps are for determining the necessary platforms. That is, they are for determining the rows to place platforms which are necessary in order to prevent blocks without anything under to free fall upon level start. In addition to the necessary platforms, there are also extra platforms. Extra platforms are the platforms inserted to the structure not because of preventing blocks from free falling, but to create places to be able to insert more pigs. The algorithm to insert extra platforms is as follows:

  1. Determine the topmost and bottommost platform.
  2. Starting from the topmost platform and going above, insert an extra platform every Nth row, where N is equal to the number of primary blocks required to cover pig height.
  3. Similar to the previous step, starting from the bottommost platform and going below, insert an extra platform every Nth row, where N is equal to the number of primary blocks required to cover pig height.
